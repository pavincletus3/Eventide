
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    match /users/{userId} {
      // Helper functions
      function isOwner() {
        return request.auth != null && request.auth.uid == userId;
      }

      function isAdmin() {
        // Check the role of the currently authenticated user from their own document in Firestore
        return request.auth != null &&
               exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
               get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
      }

      function isUserCreatingOwnProfile() {
        let isUidMatch = request.auth != null && request.auth.uid == userId;
        let isEmailMatch = request.resource.data.email == request.auth.token.email;
        let isDefaultRole = request.resource.data.role == 'student';
        let hasRequiredFields = request.resource.data.keys().hasAll(['uid', 'email', 'role', 'createdAt', 'updatedAt']);
        let hasCorrectUidField = request.resource.data.uid == request.auth.uid;
        // Ensure only expected fields are present, adjust size if schema changes
        let hasCorrectSize = request.resource.data.size() >= 5 && (!('name' in request.resource.data) || request.resource.data.size() == 6) ;


        return isUidMatch && isEmailMatch && isDefaultRole && hasRequiredFields && hasCorrectUidField && hasCorrectSize;
      }
      
      // Allow user to create their own profile document upon registration
      allow create: if isUserCreatingOwnProfile();

      // Allow owners to read their own profile, Admins can read any profile
      allow read: if isOwner() || isAdmin();

      // Allow owners to update their own profile (e.g. name, etc. - not role directly for themselves unless admin)
      // Admins can update any profile (e.g. to change roles)
      allow update: if isOwner() || isAdmin();
      
      // Deleting users is typically a more sensitive operation, often handled by backend functions or stricter admin controls.
      // allow delete: if isAdmin(); // Example: only admins can delete user documents
    }
  }
}
