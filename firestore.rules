
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper function to get user role
    function getUserRole(userId) {
      return get(/databases/$(database)/documents/users/$(userId)).data.role;
    }

    // Helper function to check if user is an admin
    function isAdmin(userId) {
      return getUserRole(userId) == 'admin';
    }

    // Helper function to check if user is an organizer, coadmin, or admin
    function isOrganizerOrHigher(userId) {
      let userRole = getUserRole(userId);
      return userRole == 'organizer' || userRole == 'coadmin' || userRole == 'admin';
    }

    // Rules for the 'users' collection
    match /users/{userId} {
      allow read: if request.auth != null && (request.auth.uid == userId || isAdmin(request.auth.uid));
      allow create: if request.auth != null && request.auth.uid == userId
                    && request.resource.data.email == request.auth.token.email
                    && request.resource.data.role == 'student' // Default role on creation
                    && request.resource.data.uid == userId
                    && request.resource.data.createdAt == request.time
                    && request.resource.data.updatedAt == request.time;
      allow update: if request.auth != null && (request.auth.uid == userId || isAdmin(request.auth.uid))
                    // Fields that can be updated by user: name, (potentially others in future)
                    // Role updates are restricted to admins in this rule, specific fields can be checked
                    // Ensuring uid, email, createdAt are not changed by user directly
                    && request.resource.data.uid == resource.data.uid
                    && request.resource.data.email == resource.data.email
                    && request.resource.data.createdAt == resource.data.createdAt
                    && request.resource.data.updatedAt == request.time;
                    // Admin can update any field, including role.
                    // If non-admin is updating, ensure they are not changing their own role:
                    // && (isAdmin(request.auth.uid) || request.resource.data.role == resource.data.role)

      allow delete: if false; // Generally, users should not be hard-deleted. Consider a 'status: deactivated' field.
    }

    // Rules for the 'events' collection
    match /events/{eventId} {
      // Authenticated users can read published events.
      // Organizers/coadmins/admins can read any event.
      allow read: if request.auth != null && 
                    (resource.data.status == 'published' || isOrganizerOrHigher(request.auth.uid));

      // Organizers, coadmins, and admins can create new events.
      allow create: if request.auth != null && isOrganizerOrHigher(request.auth.uid)
                    // Validate incoming data
                    && request.resource.data.organizerId == request.auth.uid
                    && request.resource.data.name is string && request.resource.data.name.size() > 0
                    && request.resource.data.description is string
                    && request.resource.data.date is timestamp
                    && request.resource.data.venue is string
                    && request.resource.data.maxParticipants is number && request.resource.data.maxParticipants > 0
                    && request.resource.data.status in ['draft', 'published'] // Initial status
                    && (!('imageUrl' in request.resource.data) || request.resource.data.imageUrl is string || request.resource.data.imageUrl == null)
                    && request.resource.data.createdAt == request.time
                    && request.resource.data.updatedAt == request.time;
      
      // The organizer who created an event, coadmins, and admins can update events.
      allow update: if request.auth != null && 
                      (resource.data.organizerId == request.auth.uid || isOrganizerOrHigher(request.auth.uid))
                    // Validate data on update
                    && request.resource.data.organizerId == resource.data.organizerId // Organizer cannot be changed
                    && request.resource.data.createdAt == resource.data.createdAt // Creation time cannot be changed
                    && request.resource.data.updatedAt == request.time
                    && request.resource.data.name is string && request.resource.data.name.size() > 0
                    && request.resource.data.description is string
                    && request.resource.data.date is timestamp
                    && request.resource.data.venue is string
                    && request.resource.data.maxParticipants is number && request.resource.data.maxParticipants > 0
                    && request.resource.data.status in ['draft', 'published', 'archived', 'completed']
                    && (!('imageUrl' in request.resource.data) || request.resource.data.imageUrl is string || request.resource.data.imageUrl == null);

      // Only admins can delete events.
      allow delete: if request.auth != null && isAdmin(request.auth.uid);
    }
  }
}
