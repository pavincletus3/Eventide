rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper function to check if a user's role matches a specific role.
    // IMPORTANT: This function assumes the user document exists.
    // The calling rule *must* check for existence first using exists().
    // MODIFIED: Added null check for userDoc.data
    function isUserRole(userId, roleName) {
      let userDoc = get(/databases/$(database)/documents/users/$(userId));
      return userDoc.data != null && userDoc.data.role == roleName;
    }

    // Helper function to check if a user's role is one of an array of roles.
    // IMPORTANT: This function assumes the user document exists.
    // The calling rule *must* check for existence first using exists().
    // MODIFIED: Added null check for userDoc.data
    function isUserRoleIn(userId, rolesArray) {
      let userDoc = get(/databases/$(database)/documents/users/$(userId));
      return userDoc.data != null && userDoc.data.role in rolesArray;
    }

    // Helper function to check if a user is the organizer of a specific event.
    // IMPORTANT: This function assumes the event document exists.
    // The calling rule *must* check for existence first using exists().
    function isEventOrganizer(userId, eventId) {
      // Assuming event document will always have data if it exists, and organizerId is mandatory.
      // If event.data could be null or organizerId optional, add checks like in isUserRole.
      return get(/databases/$(database)/documents/events/$(eventId)).data.organizerId == userId;
    }

    // Rules for the 'users' collection
    match /users/{userId} {
      allow read: if request.auth != null &&
                      (
                        request.auth.uid == userId || // User can read their own profile
                        ( // Admin can read any profile
                          exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
                          isUserRole(request.auth.uid, 'admin')
                        ) ||
                        ( // Organizer/coadmin can read any user profile (for fetching student details for registrations or event management)
                          exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
                          isUserRoleIn(request.auth.uid, ['organizer', 'coadmin'])
                        )
                      );
      allow create: if request.auth != null &&
                      request.auth.uid == userId &&
                      request.resource.data.email == request.auth.token.email &&
                      request.resource.data.role == 'student' &&
                      request.resource.data.uid == request.auth.uid &&
                      request.resource.data.createdAt == request.time &&
                      request.resource.data.updatedAt == request.time;
      allow update: if request.auth != null &&
                        (request.auth.uid == userId ||
                          (exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
                           isUserRole(request.auth.uid, 'admin'))
                        );
      allow delete: if request.auth != null &&
                      exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
                      isUserRole(request.auth.uid, 'admin');
    }

    // Rules for the 'events' collection
    match /events/{eventId} {
      allow list: if
        (resource.data.status == 'published') ||
        (request.auth != null &&
          exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
          (
            isUserRole(request.auth.uid, 'admin') ||
            (
              isUserRoleIn(request.auth.uid, ['organizer', 'coadmin']) &&
              resource.data.organizerId == request.auth.uid
            )
          )
        );

      allow read: if (resource.data.status == 'published') ||
                      (request.auth != null &&
                        exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
                        (isUserRoleIn(request.auth.uid, ['organizer', 'coadmin', 'admin']) || resource.data.organizerId == request.auth.uid)
                      );

      allow create: if request.auth != null &&
                      exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
                      isUserRoleIn(request.auth.uid, ['organizer', 'coadmin', 'admin']) &&
                      request.resource.data.organizerId == request.auth.uid &&
                      request.resource.data.status in ['draft', 'published', 'archived', 'completed'] &&
                      request.resource.data.createdAt == request.time &&
                      request.resource.data.updatedAt == request.time &&
                      request.resource.data.name is string && request.resource.data.name.size() > 0 &&
                      request.resource.data.description is string && request.resource.data.description.size() > 0 &&
                      request.resource.data.date is timestamp &&
                      request.resource.data.venue is string && request.resource.data.venue.size() > 0 &&
                      request.resource.data.maxParticipants is number && request.resource.data.maxParticipants > 0;

      allow update: if request.auth != null &&
                      exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
                      (
                        (resource.data.organizerId == request.auth.uid && isUserRoleIn(request.auth.uid, ['organizer', 'coadmin'])) ||
                        isUserRoleIn(request.auth.uid, ['coadmin', 'admin'])
                      ) &&
                      request.resource.data.updatedAt == request.time &&
                      request.resource.data.organizerId == resource.data.organizerId;

      allow delete: if request.auth != null &&
                      exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
                      isUserRole(request.auth.uid, 'admin');
    }

    // Rules for the 'registrations' collection
    match /registrations/{registrationId} {
      allow list: if request.auth != null &&
                      exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
                      exists(/databases/$(database)/documents/events/$(resource.data.eventId)) &&
                      (
                        isUserRoleIn(request.auth.uid, ['admin', 'coadmin']) ||
                        (
                          isUserRole(request.auth.uid, 'organizer') &&
                          isEventOrganizer(request.auth.uid, resource.data.eventId)
                        )
                      );

      allow read: if request.auth != null && (
                      (resource.data.studentId == request.auth.uid) ||
                      (
                        exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
                        isUserRoleIn(request.auth.uid, ['organizer', 'coadmin', 'admin']) &&
                        exists(/databases/$(database)/documents/events/$(resource.data.eventId)) &&
                        (
                          isEventOrganizer(request.auth.uid, resource.data.eventId) ||
                          isUserRoleIn(request.auth.uid, ['admin', 'coadmin'])
                        )
                      )
                    );

      allow create: if request.auth != null &&
                      request.resource.data.studentId == request.auth.uid &&
                      exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
                      isUserRole(request.auth.uid, 'student') &&
                      exists(/databases/$(database)/documents/events/$(request.resource.data.eventId)) &&
                      request.resource.data.status == 'pending' &&
                      request.resource.data.registeredAt == request.time &&
                      request.resource.data.eventId is string &&
                      request.resource.data.qrCodeData is string;

      allow update: if request.auth != null &&
                      exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
                      exists(/databases/$(database)/documents/events/$(resource.data.eventId)) &&
                      (
                        (
                          isUserRole(request.auth.uid, 'organizer') &&
                          isEventOrganizer(request.auth.uid, resource.data.eventId) &&
                          request.resource.keys().hasAny(['status', 'checkedInAt', 'updatedAt']) &&
                          (!('status' in request.resource.data) || request.resource.data.status in ['pending', 'approved', 'rejected', 'attended']) &&
                          (!('checkedInAt' in request.resource.data) || request.resource.data.checkedInAt is timestamp || request.resource.data.checkedInAt == null)
                        ) ||
                        (
                          isUserRoleIn(request.auth.uid, ['admin', 'coadmin']) &&
                          request.resource.keys().hasAny(['status', 'checkedInAt', 'updatedAt']) &&
                          (!('status' in request.resource.data) || request.resource.data.status in ['pending', 'approved', 'rejected', 'attended']) &&
                          (!('checkedInAt' in request.resource.data) || request.resource.data.checkedInAt is timestamp || request.resource.data.checkedInAt == null)
                        )
                      ) &&
                      request.resource.data.updatedAt == request.time &&
                      request.resource.data.studentId == resource.data.studentId &&
                      request.resource.data.eventId == resource.data.eventId;

      allow delete: if false;
    }
  }
}
