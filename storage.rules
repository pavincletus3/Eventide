
rules_version = '2';

service firebase.storage {
  match /b/{bucket}/o {
    // Helper function to get user role from Firestore
    function getUserRole(userId) {
      return get(/databases/$(database)/documents/users/$(userId)).data.role;
    }

    // Rules for event images
    // Path: /event-images/{eventId}/{filename} or /event-images/{filename}
    // For simplicity, we'll use /event-images/{anyFileId}
    match /event-images/{allPaths=**} {
      // Authenticated users can read event images.
      allow read: if request.auth != null;

      // Organizer, coadmin, and admin roles can write (upload/update/delete) event images.
      allow write: if request.auth != null && 
                     (getUserRole(request.auth.uid) == 'organizer' ||
                      getUserRole(request.auth.uid) == 'coadmin' ||
                      getUserRole(request.auth.uid) == 'admin');
                      // Optional: Add size validation: request.resource.size < 5 * 1024 * 1024 (e.g. 5MB)
                      // Optional: Add content type validation: request.resource.contentType.matches('image/.*')
    }

    // Default deny all other paths if not explicitly allowed
    match /{allPaths=**} {
      allow read, write: if false;
    }
  }
}
