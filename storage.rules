
rules_version = '2';

service firebase.storage {
  match /b/{bucket}/o {

    // Helper function to get user role from Firestore
    // This function simply attempts to return the role.
    // If the document or role field doesn't exist, it will result in 'null'
    // which will make comparisons like `getUserRole(uid) == 'admin'` evaluate to false.
    function getUserRole(userId) {
      return get(/databases/$(database)/documents/users/$(userId)).data.role;
    }

    // Rules for event images
    match /event-images/{allPaths=**} {
      // Authenticated users can read event images.
      allow read: if request.auth != null;

      // Organizer, coadmin, and admin roles can write (upload/update/delete) event images.
      // It's crucial to check for the existence of the user document before trying to access its role.
      allow write: if
        request.auth != null &&
        exists(/databases/$(database)/documents/users/$(request.auth.uid)) && // Check if user doc exists
        (
          getUserRole(request.auth.uid) == 'organizer' ||
          getUserRole(request.auth.uid) == 'coadmin' ||
          getUserRole(request.auth.uid) == 'admin'
        );
        // Optional: You can chain further conditions here with &&
        // e.g., && request.resource.size < 5 * 1024 * 1024 // 5MB limit
        // e.g., && request.resource.contentType.matches('image/.*') // Image files only
    }

    // Default deny all other paths if not explicitly allowed by a rule above.
    // This rule must be the LAST rule within the match /b/{bucket}/o block.
    match /{allPaths=**} {
      allow read, write: if false;
    }
  }
}
